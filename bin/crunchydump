#!/usr/bin/env node

var Promise = require('bluebird')
var nomnom = require('nomnom')

var crunchydump = require('../lib')
var Client = crunchydump.Client
var download = crunchydump.download
var save = crunchydump.save
var name = crunchydump.name

var options = nomnom
.script("crunchydump")
.option('user', {
	abbr: 'u',
	metavar: 'NAME',
	help: 'User name',
	type: 'string',
	required: false
})
.option('password', {
	abbr: 'p',
	metavar: 'PASSWORD',
	help: 'Password',
	type: 'string',
	required: false
})
.option('series', {
	abbr: 's',
	metavar: 'NAME',
	help: 'Search series by name or it\'s portion',
	required: false
})
.option('wholeSeries', {
	abbr: 'w',
	full: 'whole-series',
	help: 'Download whole series',
	flag: true
})
.option('chapterNumber', {
	abbr: 'n',
	full: 'chapter-number',
	metavar: 'NUMBER',
	help: 'Chapter number',
	required: false,
	type: 'number'
})
.option('chapterID', {
	abbr: 'i',
	full: 'chapter-id',
	metavar: 'ID',
	help: 'Chapter ID',
	required: false,
	type: 'string'
})
.option('host', {
	help: 'API host URL',
	required: false,
	type: 'string'
})
.option('db', {
	help: 'MongoDB URL',
	metavar: 'URL',
	required: false,
	type: 'string',
	default: 'mongodb://localhost:27017/crunchydump'
})
.option('dump', {
	flag: true,
	help: 'Dump everything into MongoDB'
})
.option('serve', {
	flag: true,
	help: 'Run API mirror at http://localhost:3333/ serving data from <db>'
})
.parse()

if (options.dump) return crunchydump.db.dumpAll({
	url: options.db,
	user: options.user,
	password: options.password
})

if (options.serve) return crunchydump.serve.runServer({
	url: options.db
})

var client = new Client({host: options.host})

function findSeries (seriesList, name) {
	return seriesList.filter(function (series) {
		return series.locale.enUS.name.toLowerCase().indexOf(name.toLowerCase()) !== -1
	})
}

client
.login(options.user, options.password)
.then(function (user) {
	if (user) console.log("Logged in as %s", user.username)
	return client.getSeries()
})
.then(function (series) {
	var foundSeries = findSeries(series, options.series)
	if (!foundSeries.length) throw "Can't find matching series"
	console.log("Series found: %s", foundSeries[0].locale.enUS.name)
	return foundSeries
})
.then(function (foundSeries) {
	if (options.wholeSeries) {
		return download.series(foundSeries[0], client)
	} else {
		return download.default(foundSeries, client, options)
	}
})